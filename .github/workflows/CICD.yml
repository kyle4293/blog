name: CI/CD Pipeline

on:
  push:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: make application.yml
        if: contains(github.ref, 'main')
        run: |
          cd ./src/main/resources
          touch ./application.yml
          echo "${{ secrets.YML }}" | base64 --decode > ./application.yml
        shell: bash


      # Gradle을 사용한 빌드.
      - name: Build with Gradle
        #        run: ./gradlew build --stacktrace
        run: ./gradlew clean build -x test


      # Docker 로그인
      - name: Docker Login
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Docker 이미지 빌드 및 푸시
      - name: Build and Push Docker Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}:${{ github.sha }} .
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}:${{ github.sha }}


      # EC2 서버에 배포
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            # 기존 컨테이너의 ID를 가져옵니다. 
            CONTAINER_ID=$(docker ps -q -f name=spring-blog)
            # 기존 컨테이너가 있다면 정지하고 제거합니다.
            if [ ! -z "$CONTAINER_ID" ]; then
              docker stop $CONTAINER_ID
              docker rm $CONTAINER_ID
            fi
            
            # 새 이미지를 풀합니다.
            docker pull ${{ secrets.DOCKER_USERNAME }}/spring-blog:${{ github.sha }}
            
            # 새 이미지로 컨테이너를 실행합니다.
            docker run -d --name react-blog --log-driver=syslog -p 8080:8080 ${{ secrets.DOCKER_USERNAME }}/spring-blog:${{ github.sha }}
            
            # 사용하지 않는 이미지를 제거합니다. (방금 풀한 이미지는 제외)
            docker image prune -f
